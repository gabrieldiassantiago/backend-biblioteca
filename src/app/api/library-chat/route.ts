import { createClient } from "@/lib/supabase/server"
import { handleDeleteBook, handleSubmitBook } from "@/app/(admin)/admin/books/book-actions"
import { generateText, tool } from "ai"
import { google } from "@ai-sdk/google"
import { z } from "zod"
import nodemailer from "nodemailer"

// Interfaces
interface BookData {
  title: string
  author: string
  isbn?: string
  stock: number
  available: number
}

interface Loan {
  id: string
  created_at: string
  due_date: string
  status: string
  books: { title: string } | null
  users: { full_name: string } | null
}

const systemPrompt = `
Voc√™ √© a Biblioteca AI üìö, um assistente inteligente para gerenciamento de bibliotecas digitais.

## INSTRU√á√ïES GERAIS
- Ao adicionar livros em massa via Excel, sempre confirme com o usu√°rio antes de adicionar.
- Explique claramente para o usu√°rio o que √© o ISBN, sua import√¢ncia e como encontr√°-lo.
- Se o usu√°rio pedir "ajuda", explique o que cada ferramenta pode fazer, com exemplos simples.
- Para listar livros, mostre uma lista resumida com os 10 livros mais recentes.
- Sempre valide IDs e nomes fornecidos; se estiverem incompletos, ajude o usu√°rio a encontrar os dados corretos.
- Seja educado, claro e objetivo. Explique passos quando necess√°rio.
- Sempre confirme a√ß√µes importantes, como exclus√£o de livros ou confirma√ß√µes de empr√©stimos.

##AVISOS IMPORTANTES
- Nunca jamais envie comandos ou informa√ß√µes sens√≠veis como senhas, chaves de API ou dados pessoais.
- Nunca compartilhe informa√ß√µes de usu√°rios sem consentimento expl√≠cito.
- Nunca execute a√ß√µes que possam comprometer a seguran√ßa ou integridade dos dados da biblioteca.
- Jamais diga "vou executar x fun√ß√£o" ou "vou fazer y a√ß√£o". Sempre descreva o que voc√™ far√° de forma clara e objetiva.


## COMANDOS E FERRAMENTAS
1. LIVROS:
   - "listar livros", "mostrar livros", "ver livros" ‚Üí use a ferramenta 'listBooks' (voc√™ deve listar os livros de forma resumida) - jamais deixe de mostrar os livros JAMAISSSS
   - "adicionar livro", "cadastrar livro", "novo livro" ‚Üí use a ferramenta 'addBook'
   - "excluir livro", "remover livro", "deletar livro" ‚Üí use a ferramenta 'deleteBook'
   - "adicionar v√°rios livros", "importar livros" ‚Üí use a ferramenta 'addMultipleBooks'

2. EMPR√âSTIMOS:
   - "listar empr√©stimos", "mostrar empr√©stimos", "ver empr√©stimos" ‚Üí use a ferramenta 'listRecentLoans'
   - "renovar empr√©stimo", "estender empr√©stimo" ‚Üí use a ferramenta 'renewLoanAction'
   - "devolver livro", "finalizar empr√©stimo" ‚Üí use a ferramenta 'returnLoanAction'

   JAMAIS RETORNE MENSAGEM SEM OS EMPRESTIMOS EMPRESTADOS, SEMPRE RETORNE OS EMPRESTIMOS, NUNCA DEIXE DE MOSTRAR OS EMPRESTIMOS, SEMPRE RETORNE OS EMPRESTIMOS, NUNCA DEIXE DE MOSTRAR OS EMPRESTIMOS

3. COMUNICA√á√ÉO:
   - "enviar email", "notificar usu√°rio" ‚Üí use a ferramenta 'sendCustomEmail'
    - "enviar mensagem", "comunicar usu√°rio" ‚Üí use a ferramenta 'sendCustomEmail'
    - "enviar notifica√ß√£o", "notificar usu√°rio" ‚Üí use a ferramenta 'sendCustomEmail'
    - "quaisquer que seja o termo usado para enviar mensagens ou notifica√ß√µes" ‚Üí use a ferramenta 'sendCustomEmail'
    

4. RELAT√ìRIOS:
   - "gerar relat√≥rio", "criar relat√≥rio" ‚Üí use as ferramentas de relat√≥rio correspondentes
`





export async function POST(req: Request) {
  const supabase = await createClient()
  const {
    data: { user },
    error: authError,
  } = await supabase.auth.getUser()

  if (authError || !user) {
    return new Response(JSON.stringify({ error: "Usu√°rio n√£o autenticado" }), {
      status: 401,
      headers: { "Content-Type": "application/json" },
    })
  }

  const { data: userData, error: userError } = await supabase
    .from("users")
    .select("library_id")
    .eq("id", user.id)
    .single()

  if (userError || !userData?.library_id) {
    throw new Error("Usu√°rio sem biblioteca vinculada")
  }

  const {
    messages,
    bookDataForTool,
  }: {
    messages: { role: "user" | "assistant" | "system"; content: string }[]
    bookDataForTool?: BookData[]
  } = await req.json()

  try {
    const { text, toolResults } = await generateText({
      model: google("gemini-2.0-flash"),
      maxSteps: 6,
      messages: [{ role: "system", content: systemPrompt }, ...messages],
      tools: {
        addBook: tool({
          description: "Adicionar um √öNICO novo livro √† biblioteca",
          parameters: z.object({
            title: z.string(),
            author: z.string(),
            isbn: z.string().max(13).optional(),
            stock: z.number().int(),
            available: z.number().int(),
          }),
          execute: async ({ title, author, isbn, stock, available }) => {
            try {
              if (available > stock) {
                return `‚ùå Erro ao adicionar livro: Dispon√≠vel (${available}) n√£o pode ser maior que Estoque (${stock}).`
              }
              const formData = new FormData()
              formData.append("title", title)
              formData.append("author", author)
              formData.append("isbn", isbn || "")
              formData.append("stock", stock.toString())
              formData.append("available", available.toString())

              await handleSubmitBook(formData)
              return `‚úÖ Livro **${title}** adicionado com sucesso! üìö`
            } catch (err: unknown) {
              console.error("Erro ao adicionar livro:", err)
              const message =
                err instanceof Error &&
                err.message?.includes("duplicate key value violates unique constraint") &&
                err.message?.includes("books_isbn_key")
                  ? "J√° existe um livro com este ISBN."
                  : err instanceof Error && err.message?.includes('violates check constraint "books_available_check"')
                    ? "A quantidade dispon√≠vel n√£o pode ser maior que o estoque."
                    : "Ocorreu um erro."
              return `‚ùå Erro ao adicionar livro: ${message}`
            }
          },
        }),

    
      listBooks: tool({
        description: "Listar todos os livros cadastrados com formata√ß√£o em tabela",
        parameters: z.object({}),
        execute: async () => {
          try {
            const { data, error } = await supabase
              .from("books")
              .select("id, title, author, isbn, stock, available")
              .eq("library_id", userData.library_id)
              .order("created_at", { ascending: false })

            if (error) throw error
            if (!data || data.length === 0) {
              return `üìö **Nenhum livro encontrado na biblioteca.**\n\nPara adicionar um novo livro, diga: *"adicionar livro"*`
            }

            const totalBooks = data.length
            const booksToShow = data.slice(0, 15) // Mostrar mais livros na tabela

            let markdownOutput = `üìö **Acervo da Biblioteca** (${totalBooks} ${totalBooks === 1 ? "livro" : "livros"} cadastrados)\n\n`

            // Cabe√ßalho da tabela com emojis e formata√ß√£o melhorada
            markdownOutput += `| üÜî ID | üìñ T√≠tulo | ‚úçÔ∏è Autor | üìä Estoque | üìã Dispon√≠vel |\n`
            markdownOutput += `|-------|-----------|----------|------------|---------------|\n`

            // Linhas da tabela com formata√ß√£o melhorada
            for (const book of booksToShow) {
              const title = book.title.length > 30 ? book.title.substring(0, 30) + "..." : book.title
              const author = book.author.length > 25 ? book.author.substring(0, 25) + "..." : book.author
              const stockStatus = book.available === 0 ? "‚ùå Esgotado" : `‚úÖ ${book.available}`

              markdownOutput += `| **${book.id}** | ${title} | ${author} | ${book.stock} | ${stockStatus} |\n`
            }

            if (totalBooks > 15) {
              markdownOutput += `\nüìã **Mostrando os ${booksToShow.length} livros mais recentes.** H√° mais ${totalBooks - 15} livros n√£o exibidos.\n`
            }

            markdownOutput += `\nüí° **Dicas:**\n`
            markdownOutput += `‚Ä¢ Para ver detalhes completos: *"detalhes do livro ID X"*\n`
            markdownOutput += `‚Ä¢ Para buscar por t√≠tulo: *"buscar livro [nome]"*\n`
            markdownOutput += `‚Ä¢ Para adicionar novo livro: *"adicionar livro"*`

            return markdownOutput.trim()
          } catch (err) {
            console.error("Erro ao listar livros:", err)
            return `‚ùå **Erro ao carregar lista de livros:** ${err instanceof Error ? err.message : "Erro desconhecido"}\n\nTente novamente ou entre em contato com o suporte.`
          }
        },
      }),




        addMultipleBooks: tool({
          description: "Adicionar M√öLTIPLOS livros √† biblioteca AP√ìS o usu√°rio confirmar explicitamente",
          parameters: z.object({
            confirmation: z.boolean().describe("Confirma√ß√£o final para adicionar os livros processados."),
          }),
          execute: async ({ confirmation }) => {
            if (!confirmation) {
              return "‚ùì Adi√ß√£o cancelada. Nenhuma confirma√ß√£o recebida."
            }
            if (!bookDataForTool || bookDataForTool.length === 0) {
              return "‚ùå Nenhum dado de livro v√°lido encontrado para adicionar."
            }

            let successCount = 0
            let errorCount = 0
            const errors: { title: string; error: string }[] = []

            for (const book of bookDataForTool) {
              try {
                if (book.available > book.stock) {
                  throw new Error(`Dispon√≠vel (${book.available}) excede o Estoque (${book.stock}).`)
                }

                const formData = new FormData()
                formData.append("title", book.title)
                formData.append("author", book.author)
                formData.append("isbn", book.isbn || "")
                formData.append("stock", book.stock.toString())
                formData.append("available", book.available.toString())

                await handleSubmitBook(formData)
                successCount++
              } catch (err: unknown) {
                errorCount++
                const message =
                  err instanceof Error &&
                  err.message?.includes("duplicate key value violates unique constraint") &&
                  err.message?.includes("books_isbn_key")
                    ? "ISBN duplicado."
                    : err instanceof Error && err.message?.includes('violates check constraint "books_available_check"')
                      ? "Dispon√≠vel > Estoque."
                      : "Erro desconhecido."
                errors.push({ title: book.title, error: message })
                console.error(`Erro ao adicionar livro "${book.title}":`, err)
              }
            }

            let resultMessage = `‚úÖ ${successCount} ${successCount === 1 ? "livro adicionado" : "livros adicionados"} com sucesso.`
            if (errorCount > 0) {
              resultMessage += `\n‚ùå Falha ao adicionar ${errorCount} ${errorCount === 1 ? "livro" : "livros"}.`
              if (errors.length < 5) {
                resultMessage += "\n   Erros: " + errors.map((e) => `"${e.title}" (${e.error})`).join(", ")
              }
            }
            resultMessage += "\n Opera√ß√£o conclu√≠da. üìö"

            return resultMessage
          },
        }),

        listRecentLoans: tool({
          description: "Listar os 5 empr√©stimos mais recentes com formata√ß√£o aprimorada",
          parameters: z.object({}),
          execute: async () => {
            try {
              const { data: userData } = await supabase.from("users").select("library_id").eq("id", user.id).single()
              if (!userData?.library_id) throw new Error("Usu√°rio sem biblioteca")

              const { data: loans, error } = (await supabase
                .from("loans")
                .select(`
                  id,
                  created_at,
                  due_date,
                  status,
                  books:book_id ( title ),
                  users:user_id ( full_name )
                `)
                .eq("library_id", userData.library_id)
                .order("created_at", { ascending: false })
                .limit(5)) as { data: Loan[] | null; error: unknown }

              if (error) throw error
              if (!loans || loans.length === 0) return `Nenhum empr√©stimo recente encontrado.`

              let markdownOutput = "**√öltimos 5 Empr√©stimos:**\n\n"
              for (const loan of loans) {
                const loanStatus = loan.status === "active" ? "‚úÖ Ativo" : "‚Ü©Ô∏è Devolvido"
                markdownOutput += `- **ID:** ${loan.id}\n`
                markdownOutput += `  üìö **Livro:** ${loan.books?.title ?? "-"}\n`
                markdownOutput += `  üë§ **Usu√°rio:** ${loan.users?.full_name ?? "-"}\n`
                markdownOutput += `  üìÖ **Empr√©stimo:** ${new Date(loan.created_at).toLocaleDateString("pt-BR")}\n`
                markdownOutput += `  üóìÔ∏è **Vencimento:** ${new Date(loan.due_date).toLocaleDateString("pt-BR")}\n`
                markdownOutput += `  üìä **Status:** ${loanStatus}\n\n`
              }

              return markdownOutput.trim()
            } catch (err) {
              console.error("Erro ao listar empr√©stimos:", err)
              return "‚ùå Erro ao listar empr√©stimos."
            }
          },
        }),

        deleteBook: tool({
          description: "Excluir um livro pelo ID",
          parameters: z.object({ id: z.string() }),
          execute: async ({ id }) => {
            try {
              await handleDeleteBook(id)
              return `‚úÖ Livro com ID **${id}** exclu√≠do com sucesso. üóëÔ∏è`
            } catch (err) {
              if (err instanceof Error && err.message.includes("empr√©stimos ativos")) {
                return "‚ùå N√£o √© poss√≠vel excluir um livro que possui empr√©stimos ativos. Por favor, finalize os empr√©stimos antes de tentar excluir."
              }
              console.error("Erro desconhecido ao excluir livro:", err)
              return "‚ùå Ocorreu um erro inesperado ao tentar excluir o livro."
            }
          },
        }),


        sendCustomEmail: tool({
          description: "Enviar um email personalizado para um usu√°rio da biblioteca",
          parameters: z.object({
            email: z.string(),
            subject: z.string(),
            message: z.string(),
          }),
          execute: async ({ email, subject, message }) => {
            try {
              const transporter = nodemailer.createTransport({
                host: process.env.EMAIL_HOST,
                port: Number.parseInt(process.env.EMAIL_PORT || "587"),
                secure: process.env.EMAIL_SECURE === "true",
                auth: {
                  user: process.env.EMAIL_USER,
                  pass: process.env.EMAIL_PASS,
                },
              })
              await transporter.sendMail({
                from: `"Biblioteca Digital" <${process.env.EMAIL_FROM}>`,
                to: email,
                subject: subject,
                html: `<div style="font-family: Arial, sans-serif; font-size: 16px; color: #333;"><p>${message}</p></div>`,
              })
              return `‚úÖ Email enviado com sucesso para ${email}! üìß`
            } catch (err) {
              console.error("Erro ao enviar email:", err)
              return `‚ùå Erro ao enviar email: ${err instanceof Error ? err.message : "Erro desconhecido"}`
            }
          },
        }),

        generateBookReport: tool({
          description: "Gerar relat√≥rio detalhado sobre os livros da biblioteca",
          parameters: z.object({
            format: z.enum(["pdf", "excel"]).describe("Formato do relat√≥rio: pdf ou excel"),
            includeDetails: z.boolean().describe("Se deve incluir detalhes completos de cada livro"),
          }),
          execute: async ({ format, includeDetails }) => {
            try {
              const { data: books, error } = await supabase
                .from("books")
                .select("*")
                .eq("library_id", userData.library_id)
                .order("title", { ascending: true })

              if (error) throw error
              if (!books || books.length === 0) {
                return "‚ùå N√£o h√° livros cadastrados para gerar o relat√≥rio."
              }

              const reportType = format === "pdf" ? "PDF" : "Excel"
              const detailLevel = includeDetails ? "detalhado" : "resumido"
              const reportUrl = `https://biblioteca-digital.example.com/reports/books-${Date.now()}.${format}`

              return `‚úÖ Relat√≥rio ${detailLevel} de livros gerado com sucesso em formato ${reportType}!\n\nVoc√™ pode acess√°-lo atrav√©s do link: ${reportUrl}\n\nO relat√≥rio cont√©m informa√ß√µes sobre ${books.length} livros da sua biblioteca.`
            } catch (err) {
              console.error("Erro ao gerar relat√≥rio de livros:", err)
              return `‚ùå Erro ao gerar relat√≥rio de livros: ${err instanceof Error ? err.message : "Erro desconhecido"}`
            }
          },
        }),
      },
    })

    let responseContent = text
    if (toolResults && toolResults.length > 0) {
      responseContent = toolResults.map((result) => result.result).join("\n")
    }
    if (!responseContent) {
      responseContent = "N√£o consegui processar sua solicita√ß√£o ou gerar uma resposta."
      console.warn("generateText retornou sem texto ou resultados de ferramentas.")
    }

    return new Response(JSON.stringify({ role: "assistant", content: responseContent }), {
      headers: { "Content-Type": "application/json" },
    })
  } catch (error) {
    console.error("Erro ao processar a requisi√ß√£o de chat:", error)
    let errorMessage = "Ocorreu um erro desconhecido ao processar sua solicita√ß√£o."
    if (error instanceof Error) {
      errorMessage = `‚ùå Erro: ${error.message}`
    } else if (typeof error === "string") {
      errorMessage = `‚ùå Erro: ${error}`
    }
    if (errorMessage.includes("deadline")) {
      errorMessage =
        "‚ùå Desculpe, a solicita√ß√£o demorou muito para ser processada. Tente novamente ou simplifique sua pergunta."
    }
    return new Response(
      JSON.stringify({
        role: "assistant",
        content: errorMessage,
      }),
      { status: 500, headers: { "Content-Type": "application/json" } },
    )
  }
}
